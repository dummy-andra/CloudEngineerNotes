---




- name: Install Python
  apt:
    name:
    - python-apt
    - python3-apt
    state: latest
  become: yes


- name: "ensure nginx is at the latest version"
  apt: name=nginx state=latest
  become: yes
- name: "start nginx"
  service:
      name: nginx
      state: started
  become: yes

- name: "enable ufw firewall"
  ufw: name=ufw state=enabled
  become: yes

- name: "set logging"
  ufw:
    logging: 'on'

- name: "allow ssh connections"
  ufw:
    rule: allow
    name: OpenSSH
  become: yes

- name: "allow all access to tcp port 80"
  ufw:
    rule: allow
    port: '80'
    proto: tcp

- name: "allow nginx connections"
  ufw:
    rule: allow
    name: 'Nginx HTTP'
  become: yes

# Nginx Configuration

- name: "sets Nginx conf file"
  template:
    src: "files/nginx.conf.j2"
    dest: "/etc/nginx/sites-available/{{ http_conf }}"

- name: Enables new site
  file:
    src: "/etc/nginx/sites-available/{{ http_conf }}"
    dest: "/etc/nginx/sites-enabled/{{ http_conf }}"
    state: link
  notify: Reload Nginx

- name: "removes default site"
  file:
    path: "/etc/nginx/sites-enabled/default"
    state: absent
  notify: Reload Nginx



- name: "New landing Page"
  template:
    src: "files/index.html"
    dest: "/var/www/html/"

- name: Set discovered Ansible Python interpreter.
  set_fact:
    ansible_python_interpreter: "{{ ansible_facts.python.executable }}"
  when: ansible_python_interpreter is not defined

- name: Determine required MySQL Python libraries.
  set_fact:
    deb_mysql_python_package: "{% if 'python3' in ansible_python_interpreter|default('') %}python3-mysqldb{% else %}python-mysqldb{% endif %}"

- name: Ensure MySQL Python libraries are installed.
  apt: "name={{ deb_mysql_python_package }} state=present"




# tasks file for pip
- name: Install the Python pip module
  apt: name=python-pip 
  become: yes

#  tasks file for pip3
- name: Install the Python pip3 module
  apt: name=python3-pip 
  become: yes



# tasks file for mysql
- name: Install python module
  apt:
    name: "{{  item  }}"
    state: present
  loop:
   - python-dev
   - libmysqlclient-dev
   - build-essential
   - libssl-dev 
   - libffi-dev      
   - libxml2-dev 
   - libxslt1-dev 
   - zlib1g-dev      
   - python-pip
  become: yes

- name: Install the Python MySQLB module
  pip: name=MySQL-python state=present
  args:
    executable: /usr/bin/pip2
    #/usr/bin/pip2


- name: Specify MySQL root password before installing
  # without this, auth_socket will be used for root@localhost, and we won't be able to set the password
  debconf: name='mysql-server' question='mysql-server/root_password' value='{{mysql_root_password | quote}}' vtype='password'
  become: true    

- name: Confirm MySQL root password before installing
  debconf: name='mysql-server' question='mysql-server/root_password_again' value='{{mysql_root_password | quote}}' vtype='password'
  become: true

- name: Install MySQL server
  apt:
    name:
    - mysql-server
    - python-pymysql
    - python-mysqldb
    state: latest
  become: yes
  

- name: "start the MySQL service"
  service:
      name: mysql
      state: started
      enabled: true
  become: yes


- name: create /root/.my.cnf (from template) with password credentials
  template: src=/Users/andra/ibm/vagrant/app-vm/provisioning/group_vars/.my.cnf dest=/root/.my.cnf owner=root mode=0600
  become: true

# - name: update mysql root password for all root accounts
#   mysql_user: 
#     name: root 
#     host: "{{ item }}" 
#     password: "{{ mysql_root_password }}"
#     sql_log_bin: yes
#     # login_user: root
#     # login_password: "{{ mysql_root_password }}"
#     # check_implicit_admin: yes
#     priv: "*.*:ALL,GRANT"
#   with_items:
#     - "{{ ansible_hostname }}"
#     - 127.0.0.1
#     - ::1
#     - localhost 
#   become: yes

- name: update mysql root password for all root accounts
  mysql_user: name=root host={{ item }} password={{ mysql_root_password }} sql_log_bin=yes priv=*.*:ALL,GRANT
  with_items:
    - "{{ ansible_hostname }}"
    - 127.0.0.1
    - ::1
    - "localhost"
  become: true
  
      
- name: "remove the test database"
  mysql_db: name=test state=absent
  become: yes


- name: "create deploy user for mysql"
  mysql_user: user="deploy" host="%" password={{ mysql_user_password }} priv=*.*:ALL,GRANT
  become: yes

- name: "ensure anonymous users are not in the database"
  mysql_user: user='' host=$item state=absent
  with_items:
    - "{{ ansible_hostname }}"
    - 127.0.0.1
    - ::1
    - localhost 
  become: yes



- name: "install php"
  apt: name={{ item }} update_cache=yes state=latest
  with_items:
      - git
      - mcrypt
      - php7.0-common
      - php7.0-cli
      - php7.0-dev
      - php7.0-fpm
      - libpcre3-dev
      - php7.0-gd
      - php7.0-curl
      - php7.0-imap
      - php7.0-json
      - php7.0-opcache
      - php7.0-xml
      - php7.0-mbstring
      - sqlite3
  become: yes

# Sets Up PHP Info Page

- name: "Sets Up PHP Info Page"
  template:
    src: "files/info.php.j2"
    dest: "/var/www/html/info.php"

# Handlers



